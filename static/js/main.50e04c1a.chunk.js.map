{"version":3,"sources":["dataSource/customerDataSource.js","components/FilterPopover.js","components/Header.js","colors.js","components/Column.js","components/ColumnList.js","components/EditPanel.js","components/ViewTable.js","components/TableDashboard.js","components/TableBuilder.js","App.js","reportWebVitals.js","index.js"],"names":["customerDataSource","customerName","status","syncedFrom","startDate","mrr","termLength","invoiceNo","NO_OPERATOR_SELECTED","GREATER_THAN","LESS_THAN","EQUAL_TO","NOT_EQUAL_TO","FilterPopover","filterName","filterOperator","filterAmount","closePopover","onApplyFilter","useState","filterOperatorInput","setFilterOperatorInput","filterAmountInput","setFilterAmountInput","Pane","width","height","paddingTop","majorScale","paddingBottom","paddingLeft","paddingRight","display","justifyContent","alignItems","flexDirection","Text","Heading","marginTop","SelectField","label","marginRight","value","onChange","target","TextInputField","name","type","required","disabled","Button","appearance","onClick","Header","onImportConfig","onExportConfig","showImportDialog","setShowImportDialog","importedJSONConfig","setImportedJSONConfig","background","border","marginLeft","size","Dialog","isShown","title","onCloseComplete","JSON","parse","confirmLabel","Label","htmlFor","marginBottom","Textarea","id","placeholder","COLORS","neutral","base","dark","blue","Column","isFilterable","onColumnToggle","shouldDisplay","handleApplyFilter","operator","amount","ListItem","className","margin","Checkbox","checked","Badge","isSolid","minorScale","Pill","Popover","content","close","shouldCloseOnExternalClick","defaultProps","ColumnList","columnSettings","columnIDList","Object","keys","UnorderedList","map","columnID","columnSetting","EditPanel","flex","borderTop","color","ViewTable","customerDataList","selectedColumnIDList","filter","ID","selectedColumnNameList","filterList","columnName","Table","Head","TextHeaderCell","VirtualBody","allowAutoHeight","customerData","every","rowValue","Row","TextCell","TableDashboard","TableBuilder","setColumnSettings","useEffect","length","firstCustomerData","initialColumnSettings","forEach","key","startCase","Number","isNaN","columnSettingsImport","exportJSONConfig","stringify","navigator","clipboard","writeText","toaster","success","description","isSelected","produce","draftColumnSettings","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50e04c1a.chunk.js","sourcesContent":["const customerDataSource = [\n  {\n    customerName: 'Basecamp',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 12,\n    invoiceNo: 1,\n  },\n  {\n    customerName: 'Intercom',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 455,\n    termLength: 3,\n    invoiceNo: 2,\n  },\n  {\n    customerName: 'Dropbox',\n    status: 'available',\n    syncedFrom: 'Chargebee',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 5,\n    invoiceNo: 3,\n  },\n  {\n    customerName: 'Zoom',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 446,\n    termLength: 6,\n    invoiceNo: 4,\n  },\n  {\n    customerName: 'Heroku',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 1455,\n    termLength: 2,\n    invoiceNo: 5,\n  },\n  {\n    customerName: 'Apple',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 899,\n    termLength: 6,\n    invoiceNo: 6,\n  },\n  {\n    customerName: 'Zeneifts',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 5666,\n    termLength: 3,\n    invoiceNo: 7,\n  },\n  {\n    customerName: 'Notion',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 6,\n    invoiceNo: 8,\n  },\n  {\n    customerName: 'Italic',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 8,\n    invoiceNo: 9,\n  },\n];\n\nexport default customerDataSource;\n","import {\n  Button,\n  Heading,\n  majorScale,\n  Pane,\n  SelectField,\n  Text,\n  TextInputField,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\n// Constants for Filter Operators\nexport const NO_OPERATOR_SELECTED = null;\nexport const GREATER_THAN = 'Greater Than';\nexport const LESS_THAN = 'Less Than';\nexport const EQUAL_TO = 'Equal To';\nexport const NOT_EQUAL_TO = `Doesn't Equal`;\n\nconst FilterPopover = ({\n  filterName,\n  filterOperator,\n  filterAmount,\n  closePopover,\n  onApplyFilter,\n}) => {\n  const [filterOperatorInput, setFilterOperatorInput] = useState(\n    filterOperator\n  );\n  // Default to 0 if null\n  const [filterAmountInput, setFilterAmountInput] = useState(filterAmount || 0);\n\n  const handleSaveButtonClick = () => {\n    onApplyFilter(filterOperatorInput, filterAmountInput);\n    closePopover();\n  };\n\n  const handleClearButtonClick = () => {\n    onApplyFilter(NO_OPERATOR_SELECTED, 0);\n    closePopover();\n  };\n\n  const handleFilterOperatorInputChange = ({ target: { value } }) => {\n    setFilterOperatorInput(value);\n  };\n\n  const handleFilterAmountInputChange = ({ target: { value } }) => {\n    // Convert Input(String) to Number here\n    setFilterAmountInput(+value);\n  };\n\n  return (\n    <Pane\n      width={400}\n      height={240}\n      paddingTop={majorScale(2)}\n      paddingBottom={majorScale(2)}\n      paddingLeft={majorScale(4)}\n      paddingRight={majorScale(4)}\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"flex-start\"\n      flexDirection=\"column\"\n    >\n      <Pane>\n        <Text>Filter For</Text>\n        <Heading>{filterName}</Heading>\n      </Pane>\n      <Pane display=\"flex\" marginTop={majorScale(2)}>\n        <SelectField\n          label=\"Operator\"\n          marginRight={majorScale(4)}\n          value={filterOperatorInput}\n          onChange={handleFilterOperatorInputChange}\n        >\n          <option value={NO_OPERATOR_SELECTED}>None</option>\n          <option value={GREATER_THAN}>{GREATER_THAN}</option>\n          <option value={LESS_THAN}>{LESS_THAN}</option>\n          <option value={EQUAL_TO}>{EQUAL_TO}</option>\n          <option value={NOT_EQUAL_TO}>{NOT_EQUAL_TO}</option>\n        </SelectField>\n\n        <TextInputField\n          label=\"Amount\"\n          name=\"Amount\"\n          type=\"number\"\n          value={filterAmountInput}\n          required\n          disabled={filterOperatorInput === NO_OPERATOR_SELECTED}\n          onChange={handleFilterAmountInputChange}\n        />\n      </Pane>\n      <Pane display=\"flex\">\n        <Button\n          appearance=\"primary\"\n          onClick={handleSaveButtonClick}\n          marginRight={majorScale(1)}\n        >\n          Save\n        </Button>\n        <Button appearance=\"default\" onClick={handleClearButtonClick}>\n          Clear\n        </Button>\n      </Pane>\n    </Pane>\n  );\n};\n\nFilterPopover.propTypes = {\n  filterName: PropTypes.string.isRequired,\n  filterOperator: PropTypes.string.isRequired,\n  filterAmount: PropTypes.number.isRequired,\n  closePopover: PropTypes.func.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n};\n\nexport default FilterPopover;\n","import {\n  Button,\n  Dialog,\n  Heading,\n  Label,\n  majorScale,\n  Pane,\n  Textarea,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst IMPORT_BUTTON_COPY = `Import Table Config`;\n\nconst Header = ({ onImportConfig, onExportConfig }) => {\n  const [showImportDialog, setShowImportDialog] = useState(false);\n  const [importedJSONConfig, setImportedJSONConfig] = useState(null);\n\n  const handleImportConfig = () => {\n    setShowImportDialog(false);\n    if (importedJSONConfig) {\n      // Validate JSON here\n      onImportConfig(JSON.parse(importedJSONConfig));\n    }\n  };\n\n  return (\n    <Pane\n      background=\"tint1\"\n      height={majorScale(7)}\n      border=\"default\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Pane marginLeft={majorScale(2)}>\n        <Heading size={400}>Subscriptions List</Heading>\n      </Pane>\n\n      {/* Import Dialog */}\n      <Pane marginRight={majorScale(2)}>\n        <Dialog\n          isShown={showImportDialog}\n          title=\"Import Table Settings\"\n          onCloseComplete={handleImportConfig}\n          confirmLabel={IMPORT_BUTTON_COPY}\n        >\n          <Label htmlFor=\"json-config\" marginBottom={4} display=\"block\">\n            Import Table Settings\n          </Label>\n          <Textarea\n            id=\"json-config\"\n            placeholder=\"Paste JSON Config Here\"\n            onChange={({ target: { value } }) => {\n              setImportedJSONConfig(value);\n            }}\n            height={250}\n          />\n        </Dialog>\n        <Button\n          onClick={() => setShowImportDialog(true)}\n          marginRight={majorScale(2)}\n        >\n          {' '}\n          Import{' '}\n        </Button>\n        <Button onClick={onExportConfig}> Export </Button>\n      </Pane>\n    </Pane>\n  );\n};\n\nHeader.propTypes = {\n  onImportConfig: PropTypes.func.isRequired,\n  onExportConfig: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","const COLORS = {\n  neutral: {\n    base: '#425A70',\n    dark: '#234361',\n  },\n  blue: {\n    base: '#1070CA',\n    dark: '#084B8A',\n  },\n};\n\nexport default COLORS;\n","import {\n  Badge,\n  Button,\n  Checkbox,\n  ListItem,\n  majorScale,\n  minorScale,\n  Pane,\n  Pill,\n  Popover,\n  Text,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './Column.css';\nimport FilterPopover from './FilterPopover';\n\nconst Column = ({\n  id,\n  name,\n  isFilterable,\n  filterOperator,\n  filterAmount,\n  onApplyFilter,\n  onColumnToggle,\n  shouldDisplay,\n}) => {\n  const handleCheckboxChange = ({ target: { checked } }) => {\n    // Be sure to pass id here, instead of name\n    // ex) key : 'termLength', name: 'Term Length'\n    onColumnToggle(id, checked);\n  };\n\n  const handleApplyFilter = (operator, amount) => {\n    onApplyFilter(id, operator, amount);\n  };\n\n  return (\n    <ListItem\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      className={shouldDisplay ? 'selected' : null}\n      paddingLeft={majorScale(1)}\n      margin={0}\n    >\n      <Pane display=\"flex\" alignItems=\"center\">\n        <Checkbox\n          checked={shouldDisplay}\n          marginRight={majorScale(1)}\n          onChange={handleCheckboxChange}\n        />\n        <Text>{name}</Text>\n      </Pane>\n      <Pane display=\"flex\" alignItems=\"center\">\n        {isFilterable ? (\n          <>\n            {filterOperator ? (\n              <>\n                <Pane>\n                  <Badge isSolid marginRight={minorScale(1)}>\n                    {filterOperator}\n                  </Badge>\n                  <Pill isSolid>{filterAmount}</Pill>\n                </Pane>\n              </>\n            ) : null}\n            <Popover\n              content={({ close }) => {\n                return (\n                  <FilterPopover\n                    filterOperator={filterOperator}\n                    filterAmount={filterAmount}\n                    filterName={name}\n                    closePopover={close}\n                    onApplyFilter={handleApplyFilter}\n                  />\n                );\n              }}\n              shouldCloseOnExternalClick={false}\n            >\n              <Button disabled={!shouldDisplay} marginRight={majorScale(2)}>\n                Filter\n              </Button>\n            </Popover>\n          </>\n        ) : null}\n      </Pane>\n    </ListItem>\n  );\n};\n\nColumn.defaultProps = {\n  filterOperator: null,\n  filterAmount: null,\n};\n\nColumn.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  isFilterable: PropTypes.bool.isRequired,\n  filterOperator: PropTypes.string,\n  filterAmount: PropTypes.number,\n  shouldDisplay: PropTypes.bool.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n};\n\nexport default Column;\n","import { majorScale, Pane, UnorderedList } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Column from './Column';\n\nconst ColumnList = ({ columnSettings, onApplyFilter, onColumnToggle }) => {\n  const columnIDList = Object.keys(columnSettings);\n\n  return (\n    <Pane width=\"100%\">\n      <UnorderedList marginLeft={0} paddingLeft={majorScale(1)}>\n        {columnIDList.map((columnID) => {\n          const columnSetting = columnSettings[columnID];\n\n          return (\n            <Column\n              key={columnSetting.id}\n              id={columnSetting.id}\n              name={columnSetting.name}\n              isFilterable={columnSetting.isFilterable}\n              shouldDisplay={columnSetting.shouldDisplay}\n              filterOperator={columnSetting.filterOperator}\n              filterAmount={columnSetting.filterAmount}\n              onApplyFilter={onApplyFilter}\n              onColumnToggle={onColumnToggle}\n            />\n          );\n        })}\n      </UnorderedList>\n    </Pane>\n  );\n};\n\nColumnList.propTypes = {\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n};\n\nexport default ColumnList;\n","import { Heading, majorScale, Pane } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport COLORS from '../colors';\nimport ColumnList from './ColumnList';\n\nconst EditPanel = ({ columnSettings, onApplyFilter, onColumnToggle }) => {\n  return (\n    <Pane flex={1} background=\"tint2\" border=\"default\" borderTop=\"muted\">\n      <Pane display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading\n          size={400}\n          color={COLORS.blue.base}\n          marginTop={majorScale(2)}\n          marginBottom={majorScale(2)}\n          paddingLeft={majorScale(2)}\n          className=\"edit-panel--heading\"\n        >\n          Edit Panel\n        </Heading>\n        <ColumnList\n          columnSettings={columnSettings}\n          onApplyFilter={onApplyFilter}\n          onColumnToggle={onColumnToggle}\n        />\n      </Pane>\n    </Pane>\n  );\n};\n\nEditPanel.propTypes = {\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n};\n\nexport default EditPanel;\n","import { majorScale, minorScale, Pane, Table } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  EQUAL_TO,\n  GREATER_THAN,\n  LESS_THAN,\n  NOT_EQUAL_TO,\n  NO_OPERATOR_SELECTED,\n} from './FilterPopover';\n\nconst ViewTable = ({ columnSettings, customerDataList }) => {\n  const columnIDList = Object.keys(columnSettings);\n  const selectedColumnIDList = columnIDList.filter(\n    (ID) => columnSettings[ID].shouldDisplay\n  );\n  const selectedColumnNameList = selectedColumnIDList.map(\n    (ID) => columnSettings[ID].name\n  );\n\n  const filterList = selectedColumnIDList.filter(\n    (columnName) => columnSettings[columnName].filterOperator\n  );\n\n  const applyFilters = (customerData) =>\n    filterList.every((filterName) => {\n      const rowValue = customerData[filterName];\n      const { filterOperator, filterAmount } = columnSettings[filterName];\n\n      switch (filterOperator) {\n        case NO_OPERATOR_SELECTED:\n          return true;\n        case GREATER_THAN:\n          return rowValue > filterAmount;\n        case LESS_THAN:\n          return rowValue < filterAmount;\n        case EQUAL_TO:\n          return rowValue === filterAmount;\n        case NOT_EQUAL_TO:\n          return rowValue !== filterAmount;\n        default:\n          return true;\n      }\n    });\n\n  return (\n    <Pane flex={3} background=\"tint1\">\n      <Table>\n        <Table.Head height={minorScale(13)}>\n          {selectedColumnNameList.map((name) => (\n            <Table.TextHeaderCell key={name}>{name}</Table.TextHeaderCell>\n          ))}\n        </Table.Head>\n        <Table.VirtualBody allowAutoHeight height={majorScale(100)}>\n          {customerDataList.filter(applyFilters).map((customerData) => {\n            return (\n              <Table.Row key={customerData.invoiceNo}>\n                {selectedColumnIDList.map((ID) => (\n                  <Table.TextCell key={ID}>{customerData[ID]}</Table.TextCell>\n                ))}\n              </Table.Row>\n            );\n          })}\n        </Table.VirtualBody>\n      </Table>\n    </Pane>\n  );\n};\n\nViewTable.propTypes = {\n  customerDataList: PropTypes.arrayOf(\n    PropTypes.shape({\n      customerName: PropTypes.string.isRequired,\n      status: PropTypes.string.isRequired,\n      syncedFrom: PropTypes.string,\n      startDate: PropTypes.string,\n      mrr: PropTypes.number,\n      termLength: PropTypes.number,\n      invoiceNo: PropTypes.number,\n    }).isRequired\n  ).isRequired,\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default ViewTable;\n","/* eslint-disable no-param-reassign */\nimport { majorScale, Pane } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport EditPanel from './EditPanel';\nimport ViewTable from './ViewTable';\n\nconst TableDashboard = ({\n  columnSettings,\n  customerDataList,\n  onColumnToggle,\n  onApplyFilter,\n}) => {\n  return (\n    <Pane\n      height={`calc(100vh - ${majorScale(7)}px)`}\n      display=\"flex\"\n      background=\"tint2\"\n    >\n      <EditPanel\n        columnSettings={columnSettings}\n        onColumnToggle={onColumnToggle}\n        onApplyFilter={onApplyFilter}\n      />\n      <ViewTable\n        columnSettings={columnSettings}\n        customerDataList={customerDataList}\n      />\n    </Pane>\n  );\n};\n\nTableDashboard.propTypes = {\n  customerDataList: PropTypes.arrayOf(\n    PropTypes.shape({\n      customerName: PropTypes.string.isRequired,\n      status: PropTypes.string.isRequired,\n      syncedFrom: PropTypes.string,\n      startDate: PropTypes.string,\n      mrr: PropTypes.number,\n      termLength: PropTypes.number,\n      invoiceNo: PropTypes.number,\n    }).isRequired\n  ).isRequired,\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n};\n\nexport default TableDashboard;\n","/* eslint-disable no-param-reassign */\nimport { toaster } from 'evergreen-ui';\nimport produce from 'immer';\nimport { startCase } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport customerDataSource from '../dataSource/customerDataSource';\nimport { NO_OPERATOR_SELECTED } from './FilterPopover';\nimport Header from './Header';\nimport TableDashboard from './TableDashboard';\n\nconst TableBuilder = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [customerDataList, setCustomerDataList] = useState(customerDataSource);\n\n  const [columnSettings, setColumnSettings] = useState(null);\n\n  useEffect(() => {\n    if (customerDataList && customerDataList.length) {\n      const firstCustomerData = customerDataList[0];\n\n      const initialColumnSettings = {};\n\n      Object.keys(firstCustomerData).forEach((key) => {\n        const value = firstCustomerData[key];\n        initialColumnSettings[key] = {\n          id: key,\n          name: startCase(key),\n          isFilterable: !Number.isNaN(Number(value)),\n          filterOperator: null,\n          filterAmount: null,\n          shouldDisplay: false,\n        };\n      });\n\n      setColumnSettings(initialColumnSettings);\n    }\n  }, [customerDataList]);\n\n  const handleColumnToggle = (columnName, isSelected) => {\n    setColumnSettings(\n      produce(\n        (columnSettings,\n        (draftColumnSettings) => {\n          // Update isSelected\n          draftColumnSettings[columnName].shouldDisplay = isSelected;\n\n          // If a column is de-selected, clear out filters\n          if (!isSelected) {\n            draftColumnSettings[\n              columnName\n            ].filterOperator = NO_OPERATOR_SELECTED;\n            draftColumnSettings[columnName].filterAmount = null;\n          }\n        })\n      )\n    );\n  };\n\n  const handleApplyFilter = (columnName, filterOperator, filterAmount) => {\n    setColumnSettings(\n      produce(\n        (columnSettings,\n        (draftColumnSettings) => {\n          draftColumnSettings[columnName].filterOperator = filterOperator;\n          draftColumnSettings[columnName].filterAmount = filterAmount;\n        })\n      )\n    );\n  };\n\n  const handleImportConfig = (columnSettingsImport) => {\n    setColumnSettings(columnSettingsImport);\n  };\n\n  const handleExportConfig = () => {\n    const exportJSONConfig = JSON.stringify(columnSettings);\n    navigator.clipboard.writeText(exportJSONConfig);\n\n    toaster.success('Table Settings', {\n      description: `Table Settings Copied to Clipboard Successfully`,\n    });\n  };\n\n  return (\n    <>\n      {columnSettings ? (\n        <>\n          <Header\n            onImportConfig={handleImportConfig}\n            onExportConfig={handleExportConfig}\n          />\n          <TableDashboard\n            columnSettings={columnSettings}\n            customerDataList={customerDataList}\n            onColumnToggle={handleColumnToggle}\n            onApplyFilter={handleApplyFilter}\n          />\n        </>\n      ) : null}\n    </>\n  );\n};\n\nexport default TableBuilder;\n","import React from 'react';\nimport './App.css';\nimport TableBuilder from './components/TableBuilder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}