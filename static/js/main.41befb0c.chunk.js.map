{"version":3,"sources":["dataSource/customerDataSource.js","components/FilterPopover.js","components/Header.js","components/Column.js","components/ColumnList.js","components/EditPanel.js","components/ViewTable.js","components/TableDashboard.js","components/TableBuilder.js","App.js","reportWebVitals.js","index.js"],"names":["customerDataSource","customerName","status","syncedFrom","startDate","mrr","termLength","invoiceNo","NO_OPERATOR_SELECTED","GREATER_THAN","LESS_THAN","EQUAL_TO","NOT_EQUAL_TO","FilterPopover","filterOperator","filterAmount","closePopover","onApplyFilter","onFilterOperatorChange","onFilterAmountChange","Pane","width","height","Text","Heading","display","alignItems","justifyContent","SelectField","label","description","value","onChange","target","TextInputField","name","type","required","disabled","Button","appearance","onClick","defaultProps","Header","onImportConfig","onExportConfig","useState","showImportDialog","setShowImportDialog","importedJSONConfig","setImportedJSONConfig","background","majorScale","border","marginLeft","size","marginRight","Dialog","isShown","title","onCloseComplete","JSON","parse","confirmLabel","Label","htmlFor","marginBottom","Textarea","id","placeholder","Column","isFilterable","onColumnToggle","shouldDisplay","setFilterOperator","setFilterAmount","handleFilterOperatorChange","handleFilterAmountChange","handleApplyFilter","operator","amount","ListItem","className","Checkbox","checked","Badge","Pill","Popover","content","close","shouldCloseOnExternalClick","ColumnList","columnSettings","columnNameList","Object","keys","UnorderedList","map","columnName","columnSetting","EditPanel","flex","borderTop","color","marginTop","ViewTable","customerDataList","selectedColumnList","filter","filterList","Table","Head","column","TextHeaderCell","VirtualBody","allowAutoHeight","customerData","every","filterName","rowValue","Row","columnKey","TextCell","TableDashboard","TableBuilder","setColumnSettings","useEffect","length","firstCustomerData","initialColumnSettings","forEach","key","Number","isNaN","columnSettingsImport","exportJSONConfig","stringify","navigator","clipboard","writeText","toaster","success","isSelected","produce","draftColumnSettings","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41befb0c.chunk.js","sourcesContent":["const customerDataSource = [\n  {\n    customerName: 'Basecamp',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 12,\n    invoiceNo: 1,\n  },\n  {\n    customerName: 'Intercom',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 455,\n    termLength: 3,\n    invoiceNo: 2,\n  },\n  {\n    customerName: 'Dropbox',\n    status: 'available',\n    syncedFrom: 'Chargebee',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 5,\n    invoiceNo: 3,\n  },\n  {\n    customerName: 'Zoom',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 446,\n    termLength: 6,\n    invoiceNo: 4,\n  },\n  {\n    customerName: 'Heroku',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 1455,\n    termLength: 2,\n    invoiceNo: 5,\n  },\n  {\n    customerName: 'Apple',\n    status: 'available',\n    syncedFrom: 'Zuora',\n    startDate: '2019-01-01',\n    mrr: 899,\n    termLength: 6,\n    invoiceNo: 6,\n  },\n  {\n    customerName: 'Zeneifts',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 5666,\n    termLength: 3,\n    invoiceNo: 7,\n  },\n  {\n    customerName: 'Notion',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 6,\n    invoiceNo: 8,\n  },\n  {\n    customerName: 'Italic',\n    status: 'available',\n    syncedFrom: 'Stripe',\n    startDate: '2019-01-01',\n    mrr: 1200,\n    termLength: 8,\n    invoiceNo: 9,\n  },\n];\n\nexport default customerDataSource;\n","import {\n  Button,\n  Heading,\n  Pane,\n  SelectField,\n  Text,\n  TextInputField,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\n// Constants for Filter Operators\nexport const NO_OPERATOR_SELECTED = null;\nexport const GREATER_THAN = 'Greater Than';\nexport const LESS_THAN = 'Less Than';\nexport const EQUAL_TO = 'Equal To';\nexport const NOT_EQUAL_TO = `Doesn't Equal`;\n\nconst FilterPopover = ({\n  filterOperator,\n  filterAmount,\n  closePopover,\n  onApplyFilter,\n  onFilterOperatorChange,\n  onFilterAmountChange,\n}) => {\n  const handleSaveButtonClick = () => {\n    onApplyFilter(filterOperator, filterAmount);\n    closePopover();\n  };\n\n  const handleClearButtonClick = () => {\n    onApplyFilter(NO_OPERATOR_SELECTED, 0);\n    closePopover();\n  };\n\n  const handleFilterOperatorInputChange = ({ target: { value } }) => {\n    onFilterOperatorChange(value);\n  };\n\n  const handleFilterAmountInputChange = ({ target: { value } }) => {\n    // Convert Input(String) to Number here\n    onFilterAmountChange(+value);\n  };\n\n  return (\n    <Pane width={240} height={240}>\n      <Text>Filter For</Text>\n      <Heading>Term Length</Heading>\n      <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        <SelectField\n          label=\"Operator\"\n          description=\"Select an Operator\"\n          value={filterOperator}\n          onChange={handleFilterOperatorInputChange}\n        >\n          <option value={NO_OPERATOR_SELECTED}>None</option>\n          <option value={GREATER_THAN}>{GREATER_THAN}</option>\n          <option value={LESS_THAN}>{LESS_THAN}</option>\n          <option value={EQUAL_TO}>{EQUAL_TO}</option>\n          <option value={NOT_EQUAL_TO}>{NOT_EQUAL_TO}</option>\n        </SelectField>\n\n        <TextInputField\n          label=\"Amount\"\n          name=\"Amount\"\n          type=\"number\"\n          value={filterAmount}\n          required\n          disabled={filterOperator === NO_OPERATOR_SELECTED}\n          onChange={handleFilterAmountInputChange}\n        />\n      </Pane>\n      <Pane display=\"flex\">\n        <Button appearance=\"primary\" onClick={handleSaveButtonClick}>\n          Save\n        </Button>\n        <Button appearance=\"default\" onClick={handleClearButtonClick}>\n          Clear\n        </Button>\n      </Pane>\n    </Pane>\n  );\n};\n\nFilterPopover.defaultProps = {\n  filterOperator: NO_OPERATOR_SELECTED,\n  filterAmount: 0,\n};\n\nFilterPopover.propTypes = {\n  filterOperator: PropTypes.string,\n  filterAmount: PropTypes.number,\n  closePopover: PropTypes.func.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n  onFilterOperatorChange: PropTypes.func.isRequired,\n\n  onFilterAmountChange: PropTypes.func.isRequired,\n};\n\nexport default FilterPopover;\n","import {\n  Button,\n  Dialog,\n  Heading,\n  Label,\n  majorScale,\n  Pane,\n  Textarea,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst IMPORT_BUTTON_COPY = `Import Table Config`;\n\nconst Header = ({ onImportConfig, onExportConfig }) => {\n  const [showImportDialog, setShowImportDialog] = useState(false);\n  const [importedJSONConfig, setImportedJSONConfig] = useState(null);\n\n  const handleImportConfig = () => {\n    setShowImportDialog(false);\n    if (importedJSONConfig) {\n      // Validate JSON here\n      onImportConfig(JSON.parse(importedJSONConfig));\n    }\n  };\n\n  return (\n    <Pane\n      background=\"tint1\"\n      height={majorScale(7)}\n      border=\"default\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Pane marginLeft={majorScale(2)}>\n        <Heading size={600}>Subscriptions List</Heading>\n      </Pane>\n\n      {/* Import Dialog */}\n      <Pane marginRight={majorScale(2)}>\n        <Dialog\n          isShown={showImportDialog}\n          title=\"Import Table Settings\"\n          onCloseComplete={handleImportConfig}\n          confirmLabel={IMPORT_BUTTON_COPY}\n        >\n          <Label htmlFor=\"json-config\" marginBottom={4} display=\"block\">\n            Import Table Settings\n          </Label>\n          <Textarea\n            id=\"json-config\"\n            placeholder=\"Paste JSON Config Here\"\n            onChange={({ target: { value } }) => {\n              setImportedJSONConfig(value);\n            }}\n            height={250}\n          />\n        </Dialog>\n        <Button onClick={() => setShowImportDialog(true)}> Import </Button>\n        <Button onClick={onExportConfig}> Export </Button>\n      </Pane>\n    </Pane>\n  );\n};\n\nHeader.propTypes = {\n  onImportConfig: PropTypes.func.isRequired,\n  onExportConfig: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import {\n  Badge,\n  Button,\n  Checkbox,\n  ListItem,\n  majorScale,\n  Pane,\n  Pill,\n  Popover,\n  Text,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport './Column.css';\nimport FilterPopover, { NO_OPERATOR_SELECTED } from './FilterPopover';\n\nconst Column = ({\n  name,\n  isFilterable,\n  onApplyFilter,\n  onColumnToggle,\n  shouldDisplay,\n}) => {\n  const [filterOperator, setFilterOperator] = useState(NO_OPERATOR_SELECTED);\n\n  const [filterAmount, setFilterAmount] = useState(0);\n\n  const handleFilterOperatorChange = (value) => {\n    setFilterOperator(value);\n  };\n\n  const handleFilterAmountChange = (value) => {\n    setFilterAmount(+value);\n  };\n\n  const handleCheckboxChange = ({ target: { checked } }) => {\n    // Clear Filter Inputs when deselected\n    if (!checked) {\n      setFilterOperator(NO_OPERATOR_SELECTED);\n      setFilterAmount(0);\n    }\n\n    // Call Event Handler from Parent\n    onColumnToggle(name, checked);\n  };\n\n  const handleApplyFilter = (operator, amount) => {\n    setFilterOperator(operator);\n    setFilterAmount(amount);\n\n    onApplyFilter(name, operator, amount);\n  };\n\n  return (\n    <ListItem\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      className={shouldDisplay ? 'selected' : null}\n    >\n      <Pane display=\"flex\" alignItems=\"center\">\n        <Checkbox\n          checked={shouldDisplay}\n          marginRight={majorScale(1)}\n          onChange={handleCheckboxChange}\n        />\n        <Text>{name}</Text>\n      </Pane>\n      <Pane display=\"flex\">\n        {isFilterable ? (\n          <>\n            {filterOperator ? (\n              <>\n                <Pane>\n                  <Badge>{filterOperator}</Badge>\n                  <Pill>{filterAmount}</Pill>\n                </Pane>\n              </>\n            ) : null}\n            <Popover\n              content={({ close }) => {\n                return (\n                  <FilterPopover\n                    filterOperator={filterOperator}\n                    filterAmount={filterAmount}\n                    closePopover={close}\n                    onApplyFilter={handleApplyFilter}\n                    onFilterOperatorChange={handleFilterOperatorChange}\n                    onFilterAmountChange={handleFilterAmountChange}\n                  />\n                );\n              }}\n              shouldCloseOnExternalClick={false}\n            >\n              <Button disabled={!shouldDisplay} marginRight={majorScale(2)}>\n                Filter\n              </Button>\n            </Popover>\n          </>\n        ) : null}\n      </Pane>\n    </ListItem>\n  );\n};\n\nColumn.propTypes = {\n  name: PropTypes.string.isRequired,\n  isFilterable: PropTypes.bool.isRequired,\n  shouldDisplay: PropTypes.bool.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n};\n\nexport default Column;\n","import { Pane, UnorderedList } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Column from './Column';\n\nconst ColumnList = ({ columnSettings, onApplyFilter, onColumnToggle }) => {\n  const columnNameList = Object.keys(columnSettings);\n\n  return (\n    <Pane>\n      <UnorderedList>\n        {columnNameList.map((columnName) => {\n          const columnSetting = columnSettings[columnName];\n\n          return (\n            <Column\n              key={columnSetting.id}\n              name={columnSetting.name}\n              isFilterable={columnSetting.isFilterable}\n              shouldDisplay={columnSetting.shouldDisplay}\n              filterAmount={columnSetting.filterAmount}\n              onApplyFilter={onApplyFilter}\n              onColumnToggle={onColumnToggle}\n            />\n          );\n        })}\n      </UnorderedList>\n    </Pane>\n  );\n};\n\nColumnList.propTypes = {\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n};\n\nexport default ColumnList;\n","import { Heading, majorScale, Pane } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ColumnList from './ColumnList';\n\nconst EditPanel = ({ columnSettings, onApplyFilter, onColumnToggle }) => {\n  return (\n    <Pane flex={1} background=\"tint2\" border=\"default\" borderTop=\"muted\">\n      <Pane>\n        <Heading size={600} color=\"blue\" marginTop={majorScale(2)}>\n          Edit Panel\n        </Heading>\n        <ColumnList\n          columnSettings={columnSettings}\n          onApplyFilter={onApplyFilter}\n          onColumnToggle={onColumnToggle}\n        />\n      </Pane>\n    </Pane>\n  );\n};\n\nEditPanel.propTypes = {\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n};\n\nexport default EditPanel;\n","import React from 'react';\nimport { Pane, Table } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport {\n  NO_OPERATOR_SELECTED,\n  GREATER_THAN,\n  LESS_THAN,\n  EQUAL_TO,\n  NOT_EQUAL_TO,\n} from './FilterPopover';\n\nconst ViewTable = ({ columnSettings, customerDataList }) => {\n  const columnNameList = Object.keys(columnSettings);\n  const selectedColumnList = columnNameList.filter(\n    (columnName) => columnSettings[columnName].shouldDisplay\n  );\n\n  const filterList = selectedColumnList.filter(\n    (columnName) => columnSettings[columnName].filterOperator\n  );\n\n  const applyFilters = (customerData) =>\n    filterList.every((filterName) => {\n      const rowValue = customerData[filterName];\n      const { filterOperator, filterAmount } = columnSettings[filterName];\n\n      switch (filterOperator) {\n        case NO_OPERATOR_SELECTED:\n          return true;\n        case GREATER_THAN:\n          return rowValue > filterAmount;\n        case LESS_THAN:\n          return rowValue < filterAmount;\n        case EQUAL_TO:\n          return rowValue === filterAmount;\n        case NOT_EQUAL_TO:\n          return rowValue !== filterAmount;\n        default:\n          return true;\n      }\n    });\n\n  return (\n    <Pane flex={3} background=\"tint1\">\n      <Table>\n        <Table.Head>\n          {selectedColumnList.map((column) => (\n            <Table.TextHeaderCell key={column}>{column}</Table.TextHeaderCell>\n          ))}\n        </Table.Head>\n        <Table.VirtualBody allowAutoHeight height={600}>\n          {customerDataList.filter(applyFilters).map((customerData) => {\n            return (\n              <Table.Row key={customerData.invoiceNo}>\n                {selectedColumnList.map((columnKey) => (\n                  <Table.TextCell key={columnKey}>\n                    {customerData[columnKey]}\n                  </Table.TextCell>\n                ))}\n              </Table.Row>\n            );\n          })}\n        </Table.VirtualBody>\n      </Table>\n    </Pane>\n  );\n};\n\nViewTable.propTypes = {\n  customerDataList: PropTypes.arrayOf(\n    PropTypes.shape({\n      customerName: PropTypes.string.isRequired,\n      status: PropTypes.string.isRequired,\n      syncedFrom: PropTypes.string,\n      startDate: PropTypes.string,\n      mrr: PropTypes.number,\n      termLength: PropTypes.number,\n      invoiceNo: PropTypes.number,\n    }).isRequired\n  ).isRequired,\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default ViewTable;\n","/* eslint-disable no-param-reassign */\nimport { majorScale, Pane } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport EditPanel from './EditPanel';\nimport ViewTable from './ViewTable';\n\nconst TableDashboard = ({\n  columnSettings,\n  customerDataList,\n  onColumnToggle,\n  onApplyFilter,\n}) => {\n  return (\n    <Pane\n      height={`calc(100vh - ${majorScale(7)}px)`}\n      display=\"flex\"\n      background=\"tint2\"\n    >\n      <EditPanel\n        columnSettings={columnSettings}\n        onColumnToggle={onColumnToggle}\n        onApplyFilter={onApplyFilter}\n      />\n      <ViewTable\n        columnSettings={columnSettings}\n        customerDataList={customerDataList}\n      />\n    </Pane>\n  );\n};\n\nTableDashboard.propTypes = {\n  customerDataList: PropTypes.arrayOf(\n    PropTypes.shape({\n      customerName: PropTypes.string.isRequired,\n      status: PropTypes.string.isRequired,\n      syncedFrom: PropTypes.string,\n      startDate: PropTypes.string,\n      mrr: PropTypes.number,\n      termLength: PropTypes.number,\n      invoiceNo: PropTypes.number,\n    }).isRequired\n  ).isRequired,\n  columnSettings: PropTypes.shape(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      isFilterable: PropTypes.bool,\n      filterAmount: PropTypes.number,\n      shouldDisplay: PropTypes.bool.isRequired,\n    }).isRequired\n  ).isRequired,\n  onColumnToggle: PropTypes.func.isRequired,\n  onApplyFilter: PropTypes.func.isRequired,\n};\n\nexport default TableDashboard;\n","/* eslint-disable no-param-reassign */\nimport { toaster } from 'evergreen-ui';\nimport produce from 'immer';\nimport React, { useEffect, useState } from 'react';\nimport customerDataSource from '../dataSource/customerDataSource';\nimport { NO_OPERATOR_SELECTED } from './FilterPopover';\nimport Header from './Header';\nimport TableDashboard from './TableDashboard';\n\n// TODO :\n//        Add color to column when selected\n//        Validate JSON Config(Nice-to-have)\n//        Styling\n//        Unit Tests()\n\nconst TableBuilder = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [customerDataList, setCustomerDataList] = useState(customerDataSource);\n\n  const [columnSettings, setColumnSettings] = useState(null);\n\n  useEffect(() => {\n    if (customerDataList && customerDataList.length) {\n      const firstCustomerData = customerDataList[0];\n\n      const initialColumnSettings = {};\n\n      Object.keys(firstCustomerData).forEach((key) => {\n        const value = firstCustomerData[key];\n        initialColumnSettings[key] = {\n          id: key,\n          name: key,\n          isFilterable: !Number.isNaN(Number(value)),\n          filterOperator: null,\n          filterAmount: null,\n          shouldDisplay: false,\n        };\n      });\n\n      setColumnSettings(initialColumnSettings);\n    }\n  }, [customerDataList]);\n\n  const handleColumnToggle = (columnName, isSelected) => {\n    setColumnSettings(\n      produce(\n        (columnSettings,\n        (draftColumnSettings) => {\n          // Update isSelected\n          draftColumnSettings[columnName].shouldDisplay = isSelected;\n\n          // If a column is de-selected, clear out filters\n          if (!isSelected) {\n            draftColumnSettings[\n              columnName\n            ].filterOperator = NO_OPERATOR_SELECTED;\n            draftColumnSettings[columnName].filterAmount = null;\n          }\n        })\n      )\n    );\n  };\n\n  const handleApplyFilter = (columnName, filterOperator, filterAmount) => {\n    setColumnSettings(\n      produce(\n        (columnSettings,\n        (draftColumnSettings) => {\n          draftColumnSettings[columnName].filterOperator = filterOperator;\n          draftColumnSettings[columnName].filterAmount = filterAmount;\n        })\n      )\n    );\n  };\n\n  const handleImportConfig = (columnSettingsImport) => {\n    setColumnSettings(columnSettingsImport);\n  };\n\n  const handleExportConfig = () => {\n    const exportJSONConfig = JSON.stringify(columnSettings);\n    navigator.clipboard.writeText(exportJSONConfig);\n\n    toaster.success('Table Settings', {\n      description: `Table Settings Copied to Clipboard Successfully`,\n    });\n  };\n\n  return (\n    <>\n      {columnSettings ? (\n        <>\n          <Header\n            onImportConfig={handleImportConfig}\n            onExportConfig={handleExportConfig}\n          />\n          <TableDashboard\n            columnSettings={columnSettings}\n            customerDataList={customerDataList}\n            onColumnToggle={handleColumnToggle}\n            onApplyFilter={handleApplyFilter}\n          />\n        </>\n      ) : null}\n    </>\n  );\n};\n\nexport default TableBuilder;\n","import React from 'react';\nimport './App.css';\nimport TableBuilder from './components/TableBuilder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}